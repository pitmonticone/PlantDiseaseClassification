import pandas as pd
import pandas as pd
import pandas as pd
def read_flights(file):
flights = pandas.read_csv(file)
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
return flights
install.packages(c("backports", "broom", "dbplyr", "devtools", "fs", "future", "glue", "isoband", "janitor", "lattice", "lhs", "lme4", "lubridate", "nlme", "parsnip", "pkgdown", "purrr", "raster", "Rcpp", "RCurl", "reshape2", "reticulate", "rex", "rstanarm", "skimr", "stopwords", "survival", "tibble", "tidylog", "tidytext", "tinytex", "usethis", "withr", "xfun", "xml2"))
install.packages("moderndive")
install.packages("infer")
install.packages("tidymodels")
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
install.packages(c("boot", "class", "ggfortify", "KernSmooth", "MASS", "nnet", "pkgbuild", "spatial", "xml2"))
install.packages("ggbump")
remotes::install_github("rstudio/thematic")
remotes::install_github("rstudio/shiny#2740")
remotes::install_github("rstudio/rmarkdown#1706")
install.packages(c("git2r", "KernSmooth", "modelr", "parsnip", "pillar", "pkgbuild", "RcppParallel", "recipes", "rematch2", "renv", "rlang", "tidyr", "usethis", "xaringanthemer", "zoo"))
install.packages("ps")
install.packages("xaringanthemer")
install.packages(c("DiagrammeR", "glue", "RankAggreg", "scales", "tidyselect", "vctrs"))
install.packages(c("backports", "bookdown", "csv", "ellipsis", "shinyWidgets"))
install.packages(c("csv", "hardhat", "modelr", "sp", "tidyr", "tinytex", "xfun"))
install.packages("JuliaCall")
install.packages("rtweet")
install.packages(c("blogdown", "haven", "nlme", "rversions"))
library(tidyverse)
library(igraph)
library(DT)
library(lubridate)
## load rtweet
library(rtweet)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "q5bT4Y5d1BMlK1lRXXTVswDaJ"
api_secret_key <- "N7DNa5FUCryamrKQ2h8OW9c8zc9Wprffdt6u0H6GEnWlbB40Yy"
## authenticate via web browser
token <- create_token(
app = "econophysics",
consumer_key = api_key,
consumer_secret = api_secret_key)
pietro_friends <- get_friends(
"PietroMonticone",
retryonratelimit = TRUE)
library(tidyverse)
library(igraph)
library(DT)
library(lubridate)
## load rtweet
library(rtweet)
pietro <- read_csv("~/github/SocialPhysics/inphyt-project/rtweet/data/pietro_friends.csv",
col_types = cols(friend = col_character()))
pietro_friends_source <- pietro_friends$friend
pietro_friends_source <- pietro$friend
pietro <- read_csv("~/github/SocialPhysics/inphyt-project/rtweet/data/pietro.csv",
col_types = cols(X1 = col_skip(), friend = col_character(),
friend_friend = col_character()))
pietro_friends <- factor(pietro$friend)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Load Packages
library(tidyverse)
library(rtweet)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "q5bT4Y5d1BMlK1lRXXTVswDaJ"
api_secret_key <- "N7DNa5FUCryamrKQ2h8OW9c8zc9Wprffdt6u0H6GEnWlbB40Yy"
## authenticate via web browser
token <- create_token(
app = "econophysics",
consumer_key = api_key,
consumer_secret = api_secret_key)
pietro_friends <- read.csv("data/pietro_friends.csv")
names(pietro_friends) <- c("Source","Target")
write.csv(as.data.frame(pietro_friends), "data/pietro_friends.csv")
pietro <- read.csv("data/pietro.csv")
names(pietro) <- c("Source","Target")
write.csv(as.data.frame(pietro), "data/pietro.csv")
pietro_friends <- read_csv("~/github/SocialPhysics/inphyt-project/rtweet/data/pietro_friends.csv",
col_types = cols(Source = col_skip(),
X1 = col_skip(), X4 = col_character()))
names(pietro_friends) <- c("Source","Target")
write.csv(as.data.frame(pietro_friends), "data/pietro_friends.csv")
pietro <- read_csv("~/github/SocialPhysics/inphyt-project/rtweet/data/pietro.csv",
col_types = cols(Source = col_skip(),
Target = col_character(), X1 = col_skip(),
X4 = col_character()))
names(pietro) <- c("Source","Target")
write.csv(as.data.frame(pietro), "data/pietro.csv")
# Store Twitter API keys
# app1
api_key_app1 <- "q5bT4Y5d1BMlK1lRXXTVswDaJ"
api_secret_key_app1 <- "N7DNa5FUCryamrKQ2h8OW9c8zc9Wprffdt6u0H6GEnWlbB40Yy"
# app2
api_key_app2 <- "9mOxr73RXtDlot7wKZ1svVTFJ"
api_secret_key_app2 <- "bGd0qnKa4TuQRNWEUc8Ue10JpCkLw6CUQIPcb56xRHTENnoQON"
# Authenticate via web browser
token <- create_token(
app = "econophysics",
consumer_key = api_key_app1,
consumer_secret = api_secret_key_app1)
token <- create_token(
app = "econophysics2",
consumer_key = api_key_app2,
consumer_secret = api_secret_key_app2)
# Load packages
library(tidyverse)
library(rtweet)
# Store Twitter API keys
# app1
api_key_app1 <- "q5bT4Y5d1BMlK1lRXXTVswDaJ"
api_secret_key_app1 <- "N7DNa5FUCryamrKQ2h8OW9c8zc9Wprffdt6u0H6GEnWlbB40Yy"
# app2
api_key_app2 <- "9mOxr73RXtDlot7wKZ1svVTFJ"
api_secret_key_app2 <- "bGd0qnKa4TuQRNWEUc8Ue10JpCkLw6CUQIPcb56xRHTENnoQON"
# Authenticate via web browser
token <- create_token(
app = "econophysics",
consumer_key = api_key_app1,
consumer_secret = api_secret_key_app1)
token <- create_token(
app = "econophysics2",
consumer_key = api_key_app2,
consumer_secret = api_secret_key_app2)
# Define a function to retrieve a list of all the followes of EGO.
egonetwork_first <- function(ego){
ego_friends <- get_friends(
ego,
retryonratelimit = TRUE)
ego_friends_ids <- ego_friends$user_id
names(ego_friends) <- c("Source","Target")
write.csv(as.data.frame(ego_friends), "data/friends.csv")
}
# Define a function to retrieve a tibble of all the followees of the followees of EGO.
egonetwork_second <- function(ego){
egonetwork_first(ego)
ego_friends_friends <- tibble()
friend <- 1
flag <- TRUE
while( friend <= length(ego_friends_ids ) ) {
print(friend)
if( flag ){
new_friend <- get_friends(
ego_friends_ids[friend],
retryonratelimit = TRUE)
ego_friends_friends <- bind_rows(ego_friends_friends, new_friend)
if( friend %% 15 == 0 ){ flag <- FALSE }
friend <- friend + 1
}
else {
print( now() )
Sys.sleep(15.1 * 60)
flag <- TRUE
}
}
names(ego_friends_friends) <- c("Source","Target")
write.csv(as.data.frame(EGO_friends_friends), "data/friends_friends.csv")
}
# Define a function to retrieve a list of all the followes of EGO.
egonetwork_first <- function(ego){
ego_friends <- get_friends(
ego,
retryonratelimit = TRUE)
ego_friends_ids <- ego_friends$user_id
names(ego_friends) <- c("Source","Target")
write.csv(as.data.frame(ego_friends), "data/friends.csv")
return(ego_friends)
}
pietro_friends <- egonetwork_first("PietroMonticone")
View(pietro_friends)
rm(pietro_friends)
pietro_friends <- egonetwork_first("PietroMonticone")
egonetwork_first <- function(ego){
ego_friends <- get_friends(
ego,
retryonratelimit = TRUE)
ego_friends_ids <- ego_friends$user_id
names(ego_friends) <- c("Source","Target")
#write.csv(as.data.frame(ego_friends), "data/friends.csv")
return(ego_friends_ids)
}
pietro_friends_ids <- egonetwork_first("PietroMonticone")
# Define a function to retrieve a list of all the followes of EGO.
egonetwork_first <- function(ego){
ego_friends <- get_friends(
ego,
retryonratelimit = TRUE)
ego_friends_ids <- ego_friends$user_id
names(ego_friends) <- c("Source","Target")
#write.csv(as.data.frame(ego_friends), "data/friends.csv")
return(ego_friends_ids)
}
# Define a function to retrieve a tibble of all the followees of the followees of EGO.
egonetwork_second <- function(ego){
ego_friends_ids <- egonetwork_first(ego)
ego_friends_friends <- tibble()
friend <- 1
flag <- TRUE
while( friend <= length(ego_friends_ids ) ) {
print(friend)
if( flag ){
new_friend <- get_friends(
ego_friends_ids[friend],
retryonratelimit = TRUE)
ego_friends_friends <- bind_rows(ego_friends_friends, new_friend)
if( friend %% 25 == 0 ){ flag <- FALSE }
friend <- friend + 1
}
else {
print( now() )
Sys.sleep(15.1 * 60)
flag <- TRUE
}
}
names(ego_friends_friends) <- c("Source","Target")
#write.csv(as.data.frame(EGO_friends_friends), "data/friends_friends.csv")
return(ego_friends_friends)
}
pietro_friends_friends <- egonetwork_second("PietroMonticone")
install.packages(c("haven", "later", "rsample", "shinyWidgets", "SQUAREM"))
install.packages(c("httpuv", "lubridate", "mvtnorm", "RcppArmadillo", "StanHeaders", "vctrs"))
tinytex::reinstall_tinytex()
install.packages("aRxiv")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
setwd("~/github/NeuralNetworksProject/Report/Images")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
setwd("~/NeuralNetworksProject/Report/Images")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
setwd("~/github/NeuralNetworksProject/Report/Images")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
setwd("~/github/NeuralNetworksProject/Report/Images") # Pietro Monticone
setwd("~/GitHub/NeuralNetworksProject/Report/Images") # Claudio Moroni
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
setwd("~/github/NeuralNetworksProject/Report/Images") # Pietro Monticone
#setwd("~/GitHub/NeuralNetworksProject/Report/Images") # Claudio Moroni
